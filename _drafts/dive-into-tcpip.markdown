---
layout: post
title:  "TCP/IP 协议详解!"
date:   2016-05-29 00:31:30 +0800
categories: jekyll techs
---

# <span id="top"> 目录 </span>
* [1 概述](#1)
	* [1.1 分层](#1.1)
	* [1.2 封装](#1.2)
	* [1.3 分用](#1.3)
	* [1.4 端口号](#1.4)
* [2 协议](#2)
	* [2.1 IP协议](#2.1)
	* [2.2 IMCP协议](#2.2)
	* [2.3 IGMP协议](#2.3)
	* [2.4 TCP协议](#2.4)
	* [2.5 UDP协议](#2.5)

# <span id="1"> 1 __概述__ </span> [目录](#top)  

## <span id="1.1"> 1.1 __分层__ </span> [目录](#top)  
网络协议通常会分成不同的层级，分别进行开发，每一层分别负责不同的通信功能。TCP/IP协议族通常分四层，如下图:  

![tcp ip layer][tcp_ip_layer.image]  

从下到上分别负责不同的功能：

1. 链路层  
链路层，也叫数据链路层或者网络接口层。通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。
2. 网络层  
网络层，处理分组在网络中的活动。TCP/IP协议族中，网络层包括[IP协议](#2.1)，[ICMP协议](#2.2)，以及[IGMP协议](#2.3)。
3. 运输层  
运输层在网络层的基础之上，使用[IP协议](#2.1)，实现了两个常用的协议:[TCP协议](#2.4)和[UDP协议](#2.5)，这两个协议为两台主机上的应用程序提供了端对端的通信。
4. 应用层  
应用层拥有更多我们使用的协议，这些协议大都建立在[TCP协议](#2.4)和[UDP协议](#2.5)基础之上，如Telnet，FTP等协议。

## <span id="1.2"> 1.2 __封装__ </span> [目录](#top)  
　　当应用程序使用TCP传送数据时，该数据流(比特流)经过每一层时，每一层都会对收到的数据增加一些首部信息(有的还要增加尾部信息)。如下图所示，TCP传给IP的数据单元乘坐TCP报文段(TCP segment), IP传给网络接口的数据单元称作IP数据包(IP datagram), 通过以太网传输的比特流成为帧(Frame)。

![tcp ip package][tcp_ip_package.image]  

　　除了[TCP协议](#2.4)之外，还有[UDP协议](#2.5)，[ICMP协议](#2.2)，以及[IGMP协议](#2.3)甚至应用层的用户直接使用[IP协议](#2.1)，所以运输层协议在生成报文首部时要存入一个长度为8bit的数值，称作**协议域**。同样，一台主机上的多个程序可以同时使用[TCP协议](#2.4)和[UDP协议](#2.5)，所以在[TCP协议](#2.4)和[UDP协议](#2.5)的首部数据中，有一个16bit的[__端口号__](#1.4)用于区分不同的应用程序。TCP和UDP协议把源端口号和目的端口号分别存入报文首部中。  

## <span id="1.3"> 1.3 __分用__ </span> [目录](#top)  

　　分用是封装的逆过程，当目的主机收到一个以太网数据帧时，数据就开始从协议栈中由底向上升，同时去掉每一层协议加上的报文首部。每层协议都要检查报文首部的协议标识，以确定接收数据的上层协议。这个过程称为**分用**(Demultiplexing).  

## <span id="1.4"> 1.4 __端口号__ </span> [目录](#top)  

* TCP和UDP采用16bit的端口号来识别应用程序。
* 服务器一般使用知名端口号(1-255)提供服务，如SSH使用22端口。
* 客户端不关心自己使用的端口号，一般使用的是临时端口号(1024-5000)。
* 可以查看系统的`/etc/services`来查看常见的端口号。
  
# <span id="2"> 2 __协议__ </span> [目录](#top)

## <span id="2.1"> 2.1 __IP协议__ </span> [目录](#top)

　　本节主要解释IP协议首部数据结构。  
　　IP协议是TCP/IP协议族中最核心的协议，它提供**不可靠**，**无连接**的数据包传送服务。**不可靠**是它不能保证IP数据包能成功到达目的地。**无连接**是指IP并不维护关于后续数据包的状态信息。  
　　IP协议的首部结构如下图所示：  
![ip header][ip_header.image]

　　使用`tcpdump`命令采集到的一个IP包如下图(改示例也输出了链路层的数据，其中红线部分是IP报文首部数据)所示：
![ip example][ip_example.image]

* **4位版本号**  
在IPv4协议中，这个字段固定为4。在示例中，即为第一个4。
* **4位首部长度**  
表示首部总长度占用了多少个32bit。例子中的5表示占用5个32bit，即共`(5*32/8)=20`个字节。
* **8位服务类型**  
服务类型(TOS)包括一个3bit的优先权子字段(已忽略), 4bit的TOS子字段以及1bit未用位(必须置零)。4位的TOS分别代表：最小时延，最大吞吐量，最高可靠性和最小费用。实例中的`00`全部置零，表示一般服务。在输出行也有表示`tos 0x0`。
* **16位数据总长度**  
该长度包括首部在内的IP包总长度，实例中的`0034`表示总长度52。在输出行的表示`length 52`。  

> 注意：输出行的`length 66`表示整个报文的总长度，包括链路层，网络层以及传输层各自的数据。

* **16位标识**, **3bit标志**, **13位片偏移**  
16位标志可以唯一的标志主机发送的每一份数据包。通常主机每发送一份报文，它的值就会加1，这个字段主要用来唯一的标志一个报文的所有分片。  
3bit标志：
	* 位0:保留，必须为0
	* 位1:禁止分片(DF)
	* 位2:更多分片(MF)
实例中的`7baf`是16位标识，`4000`是3bit标志加上13bit片偏移。  

* **TTL生存周期**  
该字段标识数据包最多可以经过的最多路由器数，一旦经过一个处理它的路由器，它的值就减去1.当该字段值为0时，数据包被丢弃，并发送[ICMP协议](#2.2)报文通知源主机。示例中的`72`表示TTL，对应输出行中的`ttl 114`.  

* **8位协议**  
用来区分数据内容是使用什么协议封装的。示例中的`06`表示使用的[TCP协议](#2.4)。

* **首部校验和**  
这个16位检验和字段用于对首部查错。在每一跳，计算出的首部检验和必须与此字段进行比对，如果不一致，此报文被丢弃。值得注意的是，数据区的错误留待上层协议处理——用户数据报协议和传输控制协议都有检验和字段。  
因为生存时间字段在每一跳都会发生变化，意味着检验和必须被重新计算。  

* **32位源IP地址，32位目的IP地址**  
示例中接下来的`7cc1 a701`表示源IP地址，对应输出行的`124.193.167.1`.  
示例中的`0a68 1a8e`表示目的IP地址，对应输出行中的`10.104.26.142`.  

> 更多IPv4的信息可以参考：[IPv4 维基百科](https://zh.wikipedia.org/wiki/IPv4)

## <span id="2.2"> 2.2 __IMCP协议__ </span> [目录](#top)  

## <span id="2.3"> 2.3 __IGMP协议__ </span> [目录](#top)  


[tcp_ip_layer.image]: https://raw.githubusercontent.com/ljp827/ljp827.github.io/master/mePic/tcpip/tcp_ip%20layer.jpg "TCP/IP 分层"
[tcp_ip_package.image]: https://raw.githubusercontent.com/ljp827/ljp827.github.io/master/mePic/tcpip/tcp_ip%20package.jpg "TCP/IP 封装"
[ip_header.image]: https://raw.githubusercontent.com/ljp827/ljp827.github.io/master/mePic/tcpip/ip%20header.jpg "IP 协议首部结构"
[ip_example.image]: https://raw.githubusercontent.com/ljp827/ljp827.github.io/master/mePic/tcpip/ip%20example.jpg "IP 协议首部数据示例"
